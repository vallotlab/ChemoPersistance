View(sig.scRNA)
n_differential_peaks = length(which(sig.scRNA$log2FC_ChIP < -1 & sig.scRNA$qvalue_ChIP <0.1))
n_differential_peaks
sig.peaks <- res.ChIPgene$ID[abs(res.ChIPgene$log2FC.X5FU2_3_5)>1 & res.ChIPgene$qval.X5FU2_3_5<0.1]
#Study the correlation between expression and changes in H3K27me3 enrichment on peaks that are diff enriched
subset_int <- res.scRNA[res.scRNA$ChIP %in% sig.peaks,]
n_tot = nrow(sig.scRNA)
n_peaks = length(which(sig.scRNA$ChIP != 0))
n_differential_peaks = length(which(sig.scRNA$log2FC_ChIP < -1 & sig.scRNA$qvalue_ChIP <0.1))
View(res.scRNA)
View(sig.scRNA)
library(here)
maindir= here()
resdir <- file.path(maindir,"output","scRNAseq","MM468","Persister","Supervised")
tabdir <- file.path(resdir,"Tables");if(!file.exists(tabdir)){dir.create(tabdir)}
plotdir <- file.path(resdir,"Plots");if(!file.exists(plotdir)){dir.create(plotdir)}
resdir_boxplots <-  file.path(resdir,"Boxplots");if(!file.exists(resdir_boxplots)){dir.create(resdir_boxplots)}
resdir_UMAPs <-  file.path(resdir,"UMAP");if(!file.exists(resdir_UMAPs)){dir.create(resdir_UMAPs)}
resdir_heatmaps <-  file.path(resdir,"Heatmaps");if(!file.exists(resdir_heatmaps)){dir.create(resdir_heatmaps)}
EnrichDir <- file.path(tabdir,"Gene_set_analysis");if(!file.exists(EnrichDir)){dir.create(EnrichDir)}
RDataSupdir <-  file.path(resdir,"RData");if(!file.exists(RDataSupdir)){dir.create(RDataSupdir)}
RDatadir <- file.path(file.path(maindir,"output","scRNAseq","MM468","Persister","Unsupervised","RData"))
source(file.path(maindir,"Scripts","global_var.R"))
## Import annotation file
load(file.path(RDatadir,"subset_analysis.RData"))
load(file.path(RDatadir,"MM468.RData"))
metadata <- as.data.frame(annot_subset)
####################################################################
### COMPARISON SETUP
####################################################################
log2FC_thresholds <- log2(c(2,3,4))
Signif_threshold <- 0.01
## Type of analysis
algoType <- c("edgeR") ## Limma or DESeq or a vector of both or edgeR for single-cell
useBlockFactor <- FALSE ## TRUE or FALSE
annotationDatabases <- c("MSigDB") # "KEGG" or "GO" or "KEGG_GO" or "MSigDB"
table(metadata[,c("sample_id","louvain_partition")])
mygps <- list(
'C2_pers'=metadata[which(metadata$louvain_partition %in% c("C2") ),"cell_id"],
'MM468_5FU6_day214'=metadata[which(metadata$sample_id %in% c("MM468_5FU6_day214") ),"cell_id"]
)
mygps <- list(
'C2_pers'=metadata[which(metadata$louvain_partition %in% c("C2") ),"cell_id"],
'MM468_5FU6_day33'=metadata[which(metadata$sample_id %in% c("MM468_5FU6_day33") ),"cell_id"]
)
myrefs <- list(
'DMSO'=metadata[which(metadata$sample_id %in% c("MM468_initial") ),"cell_id"],
'DMSO'=metadata[which(metadata$sample_id %in% c("MM468_initial") ),"cell_id"]
) # Sets reference (can be 1 or more samples)
refs <- names(myrefs)
groups <- names(mygps)
RawCounts <- Signal[,metadata$cell_id]
feature <- gene_metadata
rm(Signal); gc()
##############################################################################################
###############			START COMPARISONS						##############################
##############################################################################################
##############################################################################################
###############			0.PRE-PROCESS				##############################
##############################################################################################
# select genes which are detected in at least 1% of cells
Percent=0.01
sel <- which(apply(RawCounts,1,function(x) length(which(x>0)))>Percent*dim(RawCounts)[2])
RawCounts <- RawCounts[sel,];feature <- feature[sel,]
gc()
##############################################################################################
###############			1.Wilcox                     			##############################
#en entrée matrice de compte non normalisée, ou voir scran pour normalisation
my.res <- geco.CompareedgeRGLM (dataMat=RawCounts,
annot=metadata,
ref=myrefs,
groups=mygps,
featureTab=feature
)
library(geco.RNAseq)
#en entrée matrice de compte non normalisée, ou voir scran pour normalisation
my.res <- geco.CompareedgeRGLM (dataMat=RawCounts,
annot=metadata,
ref=myrefs,
groups=mygps,
featureTab=feature
)
pkgsdir <- "~/Documents/Vallot_lab/R_packages/Others/"
pkgeco <- "scTools"
pkgecoloc <- paste( pkgsdir, pkgeco, sep="/")
file.exists(pkgecoloc)
install.packages(pkgs=pkgecoloc, repos=NULL, type="source")
#en entrée matrice de compte non normalisée, ou voir scran pour normalisation
my.res <- geco.CompareedgeRGLM (dataMat=RawCounts,
annot=metadata,
ref=myrefs,
groups=mygps,
featureTab=feature
)
library(scTools)
#en entrée matrice de compte non normalisée, ou voir scran pour normalisation
my.res <- geco.CompareedgeRGLM (dataMat=RawCounts,
annot=metadata,
ref=myrefs,
groups=mygps,
featureTab=feature
)
library(edgeR)
#en entrée matrice de compte non normalisée, ou voir scran pour normalisation
my.res <- geco.CompareedgeRGLM (dataMat=RawCounts,
annot=metadata,
ref=myrefs,
groups=mygps,
featureTab=feature
)
for(log2FC_threshold in log2FC_thresholds){
under_res = my.res %>% dplyr::filter(log2FC.C2_pers < -log2FC_threshold & qval.C2_pers < Signif_threshold) %>%
dplyr::arrange(qval.C2_pers) %>% dplyr::select(Symbol,log2FC.C2_pers,qval.C2_pers)
over_res = my.res %>% dplyr::filter(log2FC.C2_pers > log2FC_threshold & qval.C2_pers < Signif_threshold) %>%
dplyr::arrange(qval.C2_pers) %>% dplyr::select(Symbol,log2FC.C2_pers,qval.C2_pers)
WriteXLS(c("over_res","under_res","my.res"),
ExcelFileName = file.path(
tabdir,paste0("Differential_analysis_Limma_logFC_",
round(log2FC_threshold,2),".xlsx")),
SheetNames = c(
paste0("Over_",round(log2FC_threshold,2),"_",Signif_threshold,"_n",
nrow(over_res)),paste0(
"Under_-",round(log2FC_threshold,2),"_",Signif_threshold,
"_n",nrow(under_res)),"All"),
perl = "perl", verbose = FALSE, row.names = FALSE,
col.names = TRUE, AdjWidth = T, AutoFilter = TRUE,
BoldHeaderRow = TRUE, na = "", FreezeRow = 1, FreezeCol = 1)
summaryTab <- geco.summaryCompareedgeR(restab=my.res,
ref=myrefs,
groups=mygps,
qval.th=Signif_threshold,
fc.th=log2FC_threshold,
plotdir=plotdir
)
write.table(summaryTab, file.path(
tabdir,paste0("Number_differentially_expressed_genes_per_group_logFC_",
round(log2FC_threshold,2),".csv")),row.names=F,quote=F,sep=";")
} ## end of if edgeR
library(dplyr)
for(log2FC_threshold in log2FC_thresholds){
under_res = my.res %>% dplyr::filter(log2FC.C2_pers < -log2FC_threshold & qval.C2_pers < Signif_threshold) %>%
dplyr::arrange(qval.C2_pers) %>% dplyr::select(Symbol,log2FC.C2_pers,qval.C2_pers)
over_res = my.res %>% dplyr::filter(log2FC.C2_pers > log2FC_threshold & qval.C2_pers < Signif_threshold) %>%
dplyr::arrange(qval.C2_pers) %>% dplyr::select(Symbol,log2FC.C2_pers,qval.C2_pers)
WriteXLS(c("over_res","under_res","my.res"),
ExcelFileName = file.path(
tabdir,paste0("Differential_analysis_Limma_logFC_",
round(log2FC_threshold,2),".xlsx")),
SheetNames = c(
paste0("Over_",round(log2FC_threshold,2),"_",Signif_threshold,"_n",
nrow(over_res)),paste0(
"Under_-",round(log2FC_threshold,2),"_",Signif_threshold,
"_n",nrow(under_res)),"All"),
perl = "perl", verbose = FALSE, row.names = FALSE,
col.names = TRUE, AdjWidth = T, AutoFilter = TRUE,
BoldHeaderRow = TRUE, na = "", FreezeRow = 1, FreezeCol = 1)
summaryTab <- geco.summaryCompareedgeR(restab=my.res,
ref=myrefs,
groups=mygps,
qval.th=Signif_threshold,
fc.th=log2FC_threshold,
plotdir=plotdir
)
write.table(summaryTab, file.path(
tabdir,paste0("Number_differentially_expressed_genes_per_group_logFC_",
round(log2FC_threshold,2),".csv")),row.names=F,quote=F,sep=";")
} ## end of if edgeR
install.packages("WriteXLS")
library(WriteXLS
)
for(log2FC_threshold in log2FC_thresholds){
under_res = my.res %>% dplyr::filter(log2FC.C2_pers < -log2FC_threshold & qval.C2_pers < Signif_threshold) %>%
dplyr::arrange(qval.C2_pers) %>% dplyr::select(Symbol,log2FC.C2_pers,qval.C2_pers)
over_res = my.res %>% dplyr::filter(log2FC.C2_pers > log2FC_threshold & qval.C2_pers < Signif_threshold) %>%
dplyr::arrange(qval.C2_pers) %>% dplyr::select(Symbol,log2FC.C2_pers,qval.C2_pers)
WriteXLS(c("over_res","under_res","my.res"),
ExcelFileName = file.path(
tabdir,paste0("Differential_analysis_Limma_logFC_",
round(log2FC_threshold,2),".xlsx")),
SheetNames = c(
paste0("Over_",round(log2FC_threshold,2),"_",Signif_threshold,"_n",
nrow(over_res)),paste0(
"Under_-",round(log2FC_threshold,2),"_",Signif_threshold,
"_n",nrow(under_res)),"All"),
perl = "perl", verbose = FALSE, row.names = FALSE,
col.names = TRUE, AdjWidth = T, AutoFilter = TRUE,
BoldHeaderRow = TRUE, na = "", FreezeRow = 1, FreezeCol = 1)
summaryTab <- geco.summaryCompareedgeR(restab=my.res,
ref=myrefs,
groups=mygps,
qval.th=Signif_threshold,
fc.th=log2FC_threshold,
plotdir=plotdir
)
write.table(summaryTab, file.path(
tabdir,paste0("Number_differentially_expressed_genes_per_group_logFC_",
round(log2FC_threshold,2),".csv")),row.names=F,quote=F,sep=";")
} ## end of if edgeR
log2FC_thresholds
round(log2FC_threshold,2)
for(log2FC_threshold in log2FC_thresholds){
under_res = my.res %>% dplyr::filter(log2FC.C2_pers < -log2FC_threshold & qval.C2_pers < Signif_threshold) %>%
dplyr::arrange(qval.C2_pers) %>% dplyr::select(Symbol,log2FC.C2_pers,qval.C2_pers)
over_res = my.res %>% dplyr::filter(log2FC.C2_pers > log2FC_threshold & qval.C2_pers < Signif_threshold) %>%
dplyr::arrange(qval.C2_pers) %>% dplyr::select(Symbol,log2FC.C2_pers,qval.C2_pers)
WriteXLS(c("over_res","under_res","my.res"),
ExcelFileName = file.path(
tabdir,paste0("Differential_analysis_Limma_logFC_",
round(log2FC_threshold,2),".xlsx")),
SheetNames = c(
paste0("Over_",round(log2FC_threshold,2),"_",Signif_threshold,"_n",
nrow(over_res)),paste0(
"Under_-",round(log2FC_threshold,2),"_",Signif_threshold,
"_n",nrow(under_res)),"All"),
perl = "perl", verbose = FALSE, row.names = FALSE,
col.names = TRUE, AdjWidth = T, AutoFilter = TRUE,
BoldHeaderRow = TRUE, na = "", FreezeRow = 1, FreezeCol = 1)
summaryTab <- geco.summaryCompareedgeR(restab=my.res,
ref=myrefs,
groups=mygps,
qval.th=Signif_threshold,
fc.th=log2FC_threshold,
plotdir=plotdir
)
write.table(summaryTab, file.path(
tabdir,paste0("Number_differentially_expressed_genes_per_group_logFC_",
round(log2FC_threshold,2),".csv")),row.names=F,quote=F,sep=";")
} ## end of if edgeR
save(my.res, file=file.path(RDataSupdir,paste("Supervised_res_object_edgeR.Rdata",sep="")))
# Load annotation databases files
rownames(my.res) <- my.res$Symbol
annotbase <- "MSigDB"
database <- MSIG.ls ##MSigDB
Overexpressed  <- Underexpressed <- data.frame()
##############################################################################################
###############			3.ENRICHMENT ANALYSIS					##############################
##############################################################################################
load(file.path(RDataSupdir,paste("Supervised_res_object_edgeR.Rdata",sep="")))
# Load annotation databases files
rownames(my.res) <- my.res$Symbol
annotbase <- "MSigDB"
database <- MSIG.ls ##MSigDB
Overexpressed  <- Underexpressed <- data.frame()
load("../../../../annotation/hg38.GeneTSS.rda")
load("../../../../annotation/hg38.MSIG.ls.rda")
load("../../../../annotation/hg38.MSIG.gs.rda")
annotbase <- "MSigDB"
database <- MSIG.ls ##MSigDB
database <- hg38.MSIG.ls ##MSigDB
Overexpressed  <- Underexpressed <- data.frame()
#rownames(my.res) <- my.res$Gene
reflist <- unique(my.res$Symbol);length(reflist)
for(i in 1:length(groups)) 	{
for(log2FC_threshold in log2FC_thresholds){
gp <- groups[i]
if (length(refs)>1) {ref <- refs[i]} else {ref <- refs[1]}
print(paste0("Processing ",gp, " vs ", ref, " _ ",annotbase ))
signific <- which(my.res[,paste("qval",gp,sep=".")] <= Signif_threshold & abs(my.res[,paste("log2FC",gp,sep=".")]) > log2FC_threshold)
over <- which(my.res[,paste("qval",gp,sep=".")] <= Signif_threshold & my.res[,paste("log2FC",gp,sep=".")] > log2FC_threshold)
under <- which(my.res[,paste("qval",gp,sep=".")] <= Signif_threshold & my.res[,paste("log2FC",gp,sep=".")] < -log2FC_threshold)
print(paste0("significant = ", length(signific))) ; print(paste0("over = ", length(over))) ; print(paste0("under = ", length(under)))
if(length(over)){
enrich.test <- geco.enrichmentTest(gene.sets=database,mylist=my.res$Symbol[over],possibleIds=reflist)
enrich.test <- data.frame(Gene_set_name=rownames(enrich.test), enrich.test, check.names=FALSE)
enrich.test <- merge( subset(MSIG.gs, select=-Genes), enrich.test, by.x="Gene.Set", by.y="Gene_set_name", all.y=TRUE, sort=FALSE ) ## Get class of gene set
enrich.test <- enrich.test[order(enrich.test$`p-value`),]
enrich.test <- enrich.test[order(enrich.test$`p-value`),]
ind <- which(enrich.test$`q-value`<= 0.1);if(!length(ind)){ind <- 1:20}
Overexpressed  <- enrich.test[ind,]		}
if(length(under)){
enrich.test <- geco.enrichmentTest(gene.sets=database,mylist=my.res$Symbol[under],possibleIds=reflist)
enrich.test <- data.frame(Gene_set_name=rownames(enrich.test), enrich.test, check.names=FALSE)
enrich.test <- merge( subset(MSIG.gs, select=-Genes), enrich.test, by.x="Gene.Set", by.y="Gene_set_name", all.y=TRUE, sort=FALSE ) ## Get class of gene set
enrich.test <- enrich.test[order(enrich.test$`p-value`),]
ind <- which(enrich.test$`q-value`<= 0.1);if(!length(ind)){ind <- 1:20}
Underexpressed <- enrich.test[ind,]		}
WriteXLS(
c("Overexpressed", "Underexpressed"),
ExcelFileName = file.path(EnrichDir,
paste0("Enrichment_test_",gp,"_vs_",ref,"_",annotbase,
"_logFC",round(log2FC_threshold,2),".xlsx")),
SheetNames = c( paste0("Overexp_in_", gp), paste0("Underexp_in_", gp) ),
perl = "perl", verbose = FALSE, row.names = FALSE, col.names = TRUE,
AdjWidth = TRUE, AutoFilter = TRUE, BoldHeaderRow = TRUE, na = "",
FreezeRow = 1, FreezeCol = 1)
save(Overexpressed,Underexpressed, file = file.path(RDataSupdir,paste0("Enrichment_test_",gp,"_vs_",ref,"_",annotbase,"_logFC",round(log2FC_threshold,2),".RData")))
}
}
library(geco.utils)
for(i in 1:length(groups)) 	{
for(log2FC_threshold in log2FC_thresholds){
gp <- groups[i]
if (length(refs)>1) {ref <- refs[i]} else {ref <- refs[1]}
print(paste0("Processing ",gp, " vs ", ref, " _ ",annotbase ))
signific <- which(my.res[,paste("qval",gp,sep=".")] <= Signif_threshold & abs(my.res[,paste("log2FC",gp,sep=".")]) > log2FC_threshold)
over <- which(my.res[,paste("qval",gp,sep=".")] <= Signif_threshold & my.res[,paste("log2FC",gp,sep=".")] > log2FC_threshold)
under <- which(my.res[,paste("qval",gp,sep=".")] <= Signif_threshold & my.res[,paste("log2FC",gp,sep=".")] < -log2FC_threshold)
print(paste0("significant = ", length(signific))) ; print(paste0("over = ", length(over))) ; print(paste0("under = ", length(under)))
if(length(over)){
enrich.test <- geco.enrichmentTest(gene.sets=database,mylist=my.res$Symbol[over],possibleIds=reflist)
enrich.test <- data.frame(Gene_set_name=rownames(enrich.test), enrich.test, check.names=FALSE)
enrich.test <- merge( subset(MSIG.gs, select=-Genes), enrich.test, by.x="Gene.Set", by.y="Gene_set_name", all.y=TRUE, sort=FALSE ) ## Get class of gene set
enrich.test <- enrich.test[order(enrich.test$`p-value`),]
enrich.test <- enrich.test[order(enrich.test$`p-value`),]
ind <- which(enrich.test$`q-value`<= 0.1);if(!length(ind)){ind <- 1:20}
Overexpressed  <- enrich.test[ind,]		}
if(length(under)){
enrich.test <- geco.enrichmentTest(gene.sets=database,mylist=my.res$Symbol[under],possibleIds=reflist)
enrich.test <- data.frame(Gene_set_name=rownames(enrich.test), enrich.test, check.names=FALSE)
enrich.test <- merge( subset(MSIG.gs, select=-Genes), enrich.test, by.x="Gene.Set", by.y="Gene_set_name", all.y=TRUE, sort=FALSE ) ## Get class of gene set
enrich.test <- enrich.test[order(enrich.test$`p-value`),]
ind <- which(enrich.test$`q-value`<= 0.1);if(!length(ind)){ind <- 1:20}
Underexpressed <- enrich.test[ind,]		}
WriteXLS(
c("Overexpressed", "Underexpressed"),
ExcelFileName = file.path(EnrichDir,
paste0("Enrichment_test_",gp,"_vs_",ref,"_",annotbase,
"_logFC",round(log2FC_threshold,2),".xlsx")),
SheetNames = c( paste0("Overexp_in_", gp), paste0("Underexp_in_", gp) ),
perl = "perl", verbose = FALSE, row.names = FALSE, col.names = TRUE,
AdjWidth = TRUE, AutoFilter = TRUE, BoldHeaderRow = TRUE, na = "",
FreezeRow = 1, FreezeCol = 1)
save(Overexpressed,Underexpressed, file = file.path(RDataSupdir,paste0("Enrichment_test_",gp,"_vs_",ref,"_",annotbase,"_logFC",round(log2FC_threshold,2),".RData")))
}
}
library(geco.supervised)
for(i in 1:length(groups)) 	{
for(log2FC_threshold in log2FC_thresholds){
gp <- groups[i]
if (length(refs)>1) {ref <- refs[i]} else {ref <- refs[1]}
print(paste0("Processing ",gp, " vs ", ref, " _ ",annotbase ))
signific <- which(my.res[,paste("qval",gp,sep=".")] <= Signif_threshold & abs(my.res[,paste("log2FC",gp,sep=".")]) > log2FC_threshold)
over <- which(my.res[,paste("qval",gp,sep=".")] <= Signif_threshold & my.res[,paste("log2FC",gp,sep=".")] > log2FC_threshold)
under <- which(my.res[,paste("qval",gp,sep=".")] <= Signif_threshold & my.res[,paste("log2FC",gp,sep=".")] < -log2FC_threshold)
print(paste0("significant = ", length(signific))) ; print(paste0("over = ", length(over))) ; print(paste0("under = ", length(under)))
if(length(over)){
enrich.test <- geco.enrichmentTest(gene.sets=database,mylist=my.res$Symbol[over],possibleIds=reflist)
enrich.test <- data.frame(Gene_set_name=rownames(enrich.test), enrich.test, check.names=FALSE)
enrich.test <- merge( subset(MSIG.gs, select=-Genes), enrich.test, by.x="Gene.Set", by.y="Gene_set_name", all.y=TRUE, sort=FALSE ) ## Get class of gene set
enrich.test <- enrich.test[order(enrich.test$`p-value`),]
enrich.test <- enrich.test[order(enrich.test$`p-value`),]
ind <- which(enrich.test$`q-value`<= 0.1);if(!length(ind)){ind <- 1:20}
Overexpressed  <- enrich.test[ind,]		}
if(length(under)){
enrich.test <- geco.enrichmentTest(gene.sets=database,mylist=my.res$Symbol[under],possibleIds=reflist)
enrich.test <- data.frame(Gene_set_name=rownames(enrich.test), enrich.test, check.names=FALSE)
enrich.test <- merge( subset(MSIG.gs, select=-Genes), enrich.test, by.x="Gene.Set", by.y="Gene_set_name", all.y=TRUE, sort=FALSE ) ## Get class of gene set
enrich.test <- enrich.test[order(enrich.test$`p-value`),]
ind <- which(enrich.test$`q-value`<= 0.1);if(!length(ind)){ind <- 1:20}
Underexpressed <- enrich.test[ind,]		}
WriteXLS(
c("Overexpressed", "Underexpressed"),
ExcelFileName = file.path(EnrichDir,
paste0("Enrichment_test_",gp,"_vs_",ref,"_",annotbase,
"_logFC",round(log2FC_threshold,2),".xlsx")),
SheetNames = c( paste0("Overexp_in_", gp), paste0("Underexp_in_", gp) ),
perl = "perl", verbose = FALSE, row.names = FALSE, col.names = TRUE,
AdjWidth = TRUE, AutoFilter = TRUE, BoldHeaderRow = TRUE, na = "",
FreezeRow = 1, FreezeCol = 1)
save(Overexpressed,Underexpressed, file = file.path(RDataSupdir,paste0("Enrichment_test_",gp,"_vs_",ref,"_",annotbase,"_logFC",round(log2FC_threshold,2),".RData")))
}
}
MSIG.gs <- hg38.MSIG.gs
MSIG.ls <- hg38.MSIG.ls
for(i in 1:length(groups)) 	{
for(log2FC_threshold in log2FC_thresholds){
gp <- groups[i]
if (length(refs)>1) {ref <- refs[i]} else {ref <- refs[1]}
print(paste0("Processing ",gp, " vs ", ref, " _ ",annotbase ))
signific <- which(my.res[,paste("qval",gp,sep=".")] <= Signif_threshold & abs(my.res[,paste("log2FC",gp,sep=".")]) > log2FC_threshold)
over <- which(my.res[,paste("qval",gp,sep=".")] <= Signif_threshold & my.res[,paste("log2FC",gp,sep=".")] > log2FC_threshold)
under <- which(my.res[,paste("qval",gp,sep=".")] <= Signif_threshold & my.res[,paste("log2FC",gp,sep=".")] < -log2FC_threshold)
print(paste0("significant = ", length(signific))) ; print(paste0("over = ", length(over))) ; print(paste0("under = ", length(under)))
if(length(over)){
enrich.test <- geco.enrichmentTest(gene.sets=database,mylist=my.res$Symbol[over],possibleIds=reflist)
enrich.test <- data.frame(Gene_set_name=rownames(enrich.test), enrich.test, check.names=FALSE)
enrich.test <- merge( subset(MSIG.gs, select=-Genes), enrich.test, by.x="Gene.Set", by.y="Gene_set_name", all.y=TRUE, sort=FALSE ) ## Get class of gene set
enrich.test <- enrich.test[order(enrich.test$`p-value`),]
enrich.test <- enrich.test[order(enrich.test$`p-value`),]
ind <- which(enrich.test$`q-value`<= 0.1);if(!length(ind)){ind <- 1:20}
Overexpressed  <- enrich.test[ind,]		}
if(length(under)){
enrich.test <- geco.enrichmentTest(gene.sets=database,mylist=my.res$Symbol[under],possibleIds=reflist)
enrich.test <- data.frame(Gene_set_name=rownames(enrich.test), enrich.test, check.names=FALSE)
enrich.test <- merge( subset(MSIG.gs, select=-Genes), enrich.test, by.x="Gene.Set", by.y="Gene_set_name", all.y=TRUE, sort=FALSE ) ## Get class of gene set
enrich.test <- enrich.test[order(enrich.test$`p-value`),]
ind <- which(enrich.test$`q-value`<= 0.1);if(!length(ind)){ind <- 1:20}
Underexpressed <- enrich.test[ind,]		}
WriteXLS(
c("Overexpressed", "Underexpressed"),
ExcelFileName = file.path(EnrichDir,
paste0("Enrichment_test_",gp,"_vs_",ref,"_",annotbase,
"_logFC",round(log2FC_threshold,2),".xlsx")),
SheetNames = c( paste0("Overexp_in_", gp), paste0("Underexp_in_", gp) ),
perl = "perl", verbose = FALSE, row.names = FALSE, col.names = TRUE,
AdjWidth = TRUE, AutoFilter = TRUE, BoldHeaderRow = TRUE, na = "",
FreezeRow = 1, FreezeCol = 1)
save(Overexpressed,Underexpressed, file = file.path(RDataSupdir,paste0("Enrichment_test_",gp,"_vs_",ref,"_",annotbase,"_logFC",round(log2FC_threshold,2),".RData")))
}
}
library(here)
maindir= here()
resdir <- file.path(maindir,"output","scRNAseq","MM468","Persister","Supervised")
tabdir <- file.path(resdir,"Tables");if(!file.exists(tabdir)){dir.create(tabdir)}
plotdir <- file.path(resdir,"Plots");if(!file.exists(plotdir)){dir.create(plotdir)}
resdir_boxplots <-  file.path(resdir,"Boxplots");if(!file.exists(resdir_boxplots)){dir.create(resdir_boxplots)}
resdir_UMAPs <-  file.path(resdir,"UMAP");if(!file.exists(resdir_UMAPs)){dir.create(resdir_UMAPs)}
resdir_heatmaps <-  file.path(resdir,"Heatmaps");if(!file.exists(resdir_heatmaps)){dir.create(resdir_heatmaps)}
EnrichDir <- file.path(tabdir,"Gene_set_analysis");if(!file.exists(EnrichDir)){dir.create(EnrichDir)}
RDataSupdir <-  file.path(resdir,"RData");if(!file.exists(RDataSupdir)){dir.create(RDataSupdir)}
RDatadir <- file.path(file.path(maindir,"output","scRNAseq","MM468","Persister","Unsupervised","RData"))
source(file.path(maindir,"Scripts","global_var.R"))
## Import annotation file
load(file.path(RDatadir,"subset_analysis.RData"))
load(file.path(RDatadir,"MM468.RData"))
metadata <- as.data.frame(annot_subset)
####################################################################
### COMPARISON SETUP
####################################################################
log2FC_thresholds <- log2(c(2,3,4))
Signif_threshold <- 0.01
## Type of analysis
algoType <- c("edgeR") ## Limma or DESeq or a vector of both or edgeR for single-cell
useBlockFactor <- FALSE ## TRUE or FALSE
annotationDatabases <- c("MSigDB") # "KEGG" or "GO" or "KEGG_GO" or "MSigDB"
table(metadata[,c("sample_id","louvain_partition")])
mygps <- list(
'C2_pers'=metadata[which(metadata$louvain_partition %in% c("C2") ),"cell_id"],
'MM468_5FU6_day33'=metadata[which(metadata$sample_id %in% c("MM468_5FU6_day33") ),"cell_id"]
)
myrefs <- list(
'DMSO'=metadata[which(metadata$sample_id %in% c("MM468_initial") ),"cell_id"],
'DMSO'=metadata[which(metadata$sample_id %in% c("MM468_initial") ),"cell_id"]
) # Sets reference (can be 1 or more samples)
refs <- names(myrefs)
groups <- names(mygps)
RawCounts <- Signal[,metadata$cell_id]
feature <- gene_metadata
rm(Signal); gc()
Percent=0.01
sel <- which(apply(RawCounts,1,function(x) length(which(x>0)))>Percent*dim(RawCounts)[2])
RawCounts <- RawCounts[sel,];feature <- feature[sel,]
gc()
##############################################################################################
###############			3.ENRICHMENT ANALYSIS					##############################
##############################################################################################
load(file.path(RDataSupdir,paste("Supervised_res_object_edgeR.Rdata",sep="")))
# Load annotation databases files
rownames(my.res) <- my.res$Symbol
# Load annotation databases files
rownames(my.res) <- my.res$Symbol
annotbase <- "MSigDB"
database <- MSIG.ls ##MSigDB
source(file.path(maindir,"Scripts","global_var.R"))
install.packages("DropletUtils")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DropletUtils")
source(file.path(maindir,"Scripts","global_var.R"))
source(file.path(maindir,"Scripts","global_var.R"))
source(file.path(maindir,"Scripts","global_var.R"))
install.packages("ccRemover")
source(file.path(maindir,"Scripts","global_var.R"))
install.packages("gplots")
source(file.path(maindir,"Scripts","global_var.R"))
install.packages("genefilter")
library(monocle3)
library(genefilter)
source("http://bioconductor.org/biocLite.R")
BiocManager::install("genefilter")
source(file.path(maindir,"Scripts","global_var.R"))
BiocManager::install("monocle3")
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
'limma', 'S4Vectors', 'SingleCellExperiment',
'SummarizedExperiment', 'batchelor', 'Matrix.utils'))
install.packages("devtools")
devtools::install_github('cole-trapnell-lab/leidenbase')
install.packages("devtools")
source(file.path(maindir,"Scripts","global_var.R"))
# Packages
library(ChromSCape)
source(file.path(maindir,"Scripts","global_var.R"))
# Packages
#library(ChromSCape)
library(devtools)
#library(DropletUtils)
library(irlba)
library(corrplot)
#library(scatterplot3d)
library(scater)
library(Rtsne)
library(ccRemover)
library(viridis)
library(colorRamps)
library(RColorBrewer)
library(edgeR)
library(gplots)
library(ggplot2)
library(RColorBrewer)
library(genefilter)
library(xtable)
library(WriteXLS)
library(data.table)
library(stringr)
library(limma)
#library(edgeR)
library(monocle3)
devtools::install_github('cole-trapnell-lab/leidenbase')
library(monocle3)
devtools::install_github('cole-trapnell-lab/monocle3')
library(ChromSCape)
library(ChromSCape)
